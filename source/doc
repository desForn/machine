string
    All elements in string_ satisfy i < alphabet_n_characters.
    (pos_ == negative_1 and std::empty(string_)) or pos_ < std::size(string_).
    if pos_ == negative_1 one cannot see, pop, move_l, print. Doing so throws read_past_eof_t.
    push(c) is equivalent to move_r(c); print(c); (i.e. it does not push at the end of string_ if
pos_ != std::size(string_) - 1).
    It is undefined behaviour to change string_ through data() and leave pos_ in an invalid state.

counter and unsigned_counter
    If initialised using ascii atoll is used
    
    If unsigned_counter is initialised using b_ary, the alphabet represents {0, 1, ..., b - 1}
    If unsigned_counter is initialised using b_adic, the alphabet represents {1, 2, ..., b}
    If counter is initialised using b_ary, the alphabet represents {0, 1, ..., b - 1, -}
    If counter is initialised using b_adic, the alphabet represents {1, 2, ..., b, -}
    In the signed case, it is ill-formed an input where '-' appears not at the beginning

parser
    The program must start specifying the encoder which determines the alphabets for the input,
output, stack and tape devices. It can be any of the followind types
        list c0 c1 ...;
            where ci denote the different characters of the alphabet

        alphabetic c;
            where c <= 26 is the number of letters

    The program continues specifying the devices in order which can be one of the following:
    Control with i inital state and nij terminating states, each returning the string si
        control i : s0, n00, n01, ... : s1, n10, n11, ...;
    Input
        input;
    Output
        output;
    Stack with initialiser and terminators i and t which can be "empty" or "string"
        stack i t; 
    Queue with initialiser and terminators i and t which can be "empty" or "string"
        queue i t; 
    Unsigned counter with initialiser i which can be "zero", "ascii", "b_ary", "b_adic", where b
is the base, and terminator t which can be "zero" or "string"
        ucounter i t; 
    Counter idem
        counter i t;
    Tape with default character c with initialiser and terminator i and t which can
be "empty" or "string" 
        tape c i t;
    
    Then the instruction set is specified by listing the instructions in order. Each of them
consists of a operation for the corresponing device. For example, for a machine with two devices d0
and d1 the instruction set is
        o00; o01; o10; o11;
    where oij is the operation to apply to device j at instruction i. The list of operations is the
following, where c denotes a character of the corresponding alphabet and n some control state
    Control
        n0 to n1;
    Input
        scan c;
        next c;
        eof;
    Output
        write c;
    Stack
        push c;
        pop c;
        top c;
        empty;
    Queue
        enqueue c;
        dequeue c;
        empty;
    Unsigned counter
        inc;
        dec;
        zero;
        nonzero;
    Counter
        inc;
        dec;
        zero;
        pos;
        neg; 
    Tape
        see c;
        print c;
        movel;
        mover;
        athome;

