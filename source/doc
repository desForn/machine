string
    All elements in string_ satisfy i < alphabet_n_characters.
    (pos_ == negative_1 and std::empty(string_)) or pos_ < std::size(string_).
    if pos_ == negative_1 one cannot see, pop, move_l, print. Doing so throws read_past_eof_t.
    push(c) is equivalent to move_r(c); print(c); (i.e. it does not push at the end of string_ if
pos_ != std::size(string_) - 1).
    It is undefined behaviour to change string_ through data() and leave pos_ in an invalid state.

counter and unsigned_counter
    If initialised using ascii atoll is used
    
    If unsigned_counter is initialised using b_ary, the alphabet represents {0, 1, ..., b - 1}
    If unsigned_counter is initialised using b_adic, the alphabet represents {1, 2, ..., b}
    If counter is initialised using b_ary, the alphabet represents {0, 1, ..., b - 1, -}
    If counter is initialised using b_adic, the alphabet represents {1, 2, ..., b, -}
    In the signed case, it is ill-formed an input where '-' appears not at the beginning
